import{_ as o}from"./chunks/Badges.vue_vue_type_script_setup_true_lang.AS4YxB0k.js";import{_ as s,c as d,I as t,k as e,a as i,R as c,o as n}from"./chunks/framework.9LR4Zox3.js";const D=JSON.parse('{"title":"兼容性构建","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/compat.md","filePath":"guide/compat.md"}'),l={name:"guide/compat.md"},h=e("h1",{id:"兼容性构建",tabindex:"-1"},[i("兼容性构建 "),e("a",{class:"header-anchor",href:"#兼容性构建","aria-label":'Permalink to "兼容性构建"'},"​")],-1),r=e("p",null,[i("我们利用重写的机会做了一些我们认为对未来有益的重大更改。我们建议您尝试尽可能迁移这些更改，因为它们中的大多数都应该很简单。如果您有非常深入的集成，可以尝试我们的兼容性构建，该构建与 "),e("code",null,"shiki"),i(" 的当前 API 更加一致。")],-1),p=e("h2",{id:"安装-shikiji-compat",tabindex:"-1"},[i("安装 "),e("code",null,"shikiji-compat"),i(),e("a",{class:"header-anchor",href:"#安装-shikiji-compat","aria-label":'Permalink to "安装 `shikiji-compat`"'},"​")],-1),k=c('<p>设置 <code>package.json</code> 中的 <code>shiki</code> 别名：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>\n<span class="line"><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">dependencies</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">shiki</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">npm:shikiji-compat@0.9</span><span style="--shiki-light:#B5695999;--shiki-dark:#C98A7D99;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="与-shiki-的-突破性变更" tabindex="-1">与 Shiki 的 突破性变更 <a class="header-anchor" href="#与-shiki-的-突破性变更" aria-label="Permalink to &quot;与 Shiki 的 突破性变更&quot;">​</a></h2><p>在 <a href="https://github.com/shikijs/shiki/releases/tag/v0.14.3" target="_blank" rel="noreferrer"><code>shiki@0.14.3</code></a>，Shiiki 和 Shikiji 之间的中断性变更有：</p><h3 id="硬性变更" tabindex="-1">硬性变更 <a class="header-anchor" href="#硬性变更" aria-label="Permalink to &quot;硬性变更&quot;">​</a></h3><p>变更应用于 <code>shikiji</code> 和 <code>shikiji-compat</code>：</p><ul><li>CJS 和 IIFE 版本将被删除。有关详细信息，请参阅 <a href="#cjs-usage">CJS 用法</a> 和 <a href="#cdn-usage">CDN 用法</a>。</li><li><code>codeToHtml</code> 内部使用 <a href="https://github.com/syntax-tree/hast" target="_blank" rel="noreferrer"><code>hast</code></a> 。生成的 HTML 会略有不同，但行为应该相同。</li><li><code>css-variables</code> 主题不再支持， 请改用<a href="#lightdark-dual-themes">双主题</a>，或者在<a href="/shikiji/guide/theme-colors">主题色</a>了解更多处理方式。</li></ul><h3 id="软性变更" tabindex="-1">软性变更 <a class="header-anchor" href="#软性变更" aria-label="Permalink to &quot;软性变更&quot;">​</a></h3><p>突破性变更适用于shikiji，并由 shikiji 补充：</p><ul><li>删除不再需要的顶级具名导出 <code>setCDN</code>, <code>loadLanguage</code>, <code>loadTheme</code>, <code>setWasm</code> .</li><li><code>BUNDLED_LANGUAGES</code>、 <code>BUNDLED_THEMES</code> 分别移至 <code>shikiji/langs</code> 、 <code>shikiji/themes</code> ，并分别重命名为 <code>bundledLanguages</code> 、 <code>bundledThemes</code> 。</li><li><code>getHighlighter</code>的 <code>theme</code> 选项被删除，改用数组的 <code>themes</code> 选项。</li><li>高亮器不再维护内部默认主题上下文。 <code>theme</code> 选项的 <code>codeToHtml</code> 和 <code>codeToThemedTokens</code> 是必传的。</li><li><code>codeToThemedTokens</code> 默认把 <code>includeExplanation</code> 设为 <code>false</code>。</li><li><code>.ansiToHtml</code> 作为特殊语言 <code>ansi</code> 合并到 <code>.codeToHtml</code> 。请改用 <code>.codeToHtml(code, { lang: &#39;ansi&#39; })</code> 。</li><li><code>lineOptions</code> 被删除，改用完全可自定义的 <code>transforms</code> 选项。</li><li><h1 id="languageregistration-的-grammar-字段被展开到-languageregistration-本身-有关更多详细信息-请参阅类型。" tabindex="-1"><code>LanguageRegistration</code> 的 <code>grammar</code> 字段被展开到 <code>LanguageRegistration</code> 本身，有关更多详细信息，请参阅类型。 <a class="header-anchor" href="#languageregistration-的-grammar-字段被展开到-languageregistration-本身-有关更多详细信息-请参阅类型。" aria-label="Permalink to &quot;`LanguageRegistration` 的 `grammar` 字段被展开到 `LanguageRegistration` 本身，有关更多详细信息，请参阅类型。&quot;">​</a></h1></li><li>Top-level named export <code>setCDN</code>, <code>loadLanguage</code>, <code>loadTheme</code>, <code>setWasm</code> are dropped as they are not needed anymore.</li><li><code>BUNDLED_LANGUAGES</code>, <code>BUNDLED_THEMES</code> are moved to <code>shikiji/langs</code> and <code>shikiji/themes</code> and renamed to <code>bundledLanguages</code> and <code>bundledThemes</code> respectively.</li><li><code>theme</code> option for <code>getHighlighter</code> is dropped, use <code>themes</code> with an array instead.</li><li>Highlighter does not maintain an internal default theme context. <code>theme</code> option is required for <code>codeToHtml</code> and <code>codeToThemedTokens</code>.</li></ul>',10);function g(m,u,_,f,T,b){const a=o;return n(),d("div",null,[h,r,p,t(a,{name:"shikiji-compat"}),k])}const A=s(l,[["render",g]]);export{D as __pageData,A as default};
